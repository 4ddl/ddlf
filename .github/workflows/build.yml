# This is a basic workflow to help you get started with Actions

name: build

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    tags:
      - v*
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - uses: actions/checkout@v2
    - name: Setup Node.js environment
      uses: actions/setup-node@v2.1.1
      with:
        node-version: 14.x

    - name: Project setup
      run: yarn install

    - name: Lints and fixes files
      run: yarn lint
    - name: Build
      run: yarn build
    - name: Generate Zip Package
      run: |
        cd dist/
        zip -r dist.zip ./*
        mv dist.zip ../
        cd ..
    - name: Create release
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Upload release zip
      id: upload-release-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./dist.zip
        asset_name: dist.zip
        asset_content_type: application/zip
    - name: Build Docker Image
      run: |
        docker build . file Dockerfile --tag {{ secrets.ALIYUN_IMAGE_DDLF }}:latest
    - name: Log into Aliyun Container Registry
      run: |
        echo "${{ secrets.ALIYUN_IMAGE_PASS }}" | docker login registry.cn-hangzhou.aliyuncs.com -u {{ secrets.ALIYUN_IMAGE_USER }} --password-stdin
        docker push {{ secrets.ALIYUN_IMAGE_DDLF }}:latest










